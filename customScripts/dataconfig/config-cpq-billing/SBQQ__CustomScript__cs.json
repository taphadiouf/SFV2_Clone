{
    "records": [
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef1"
            },
            "IsDeleted": false,
            "Name": "QuoteCalculatorPlugin Backup 25th NOv",
            "SBQQ__Code__c": "export function onAfterCalculate(quote, lines, conn) {\r\n    console.log('Quote : ' + quote.record[\"Id\"]);\r\n    console.log('LPCR_Contracted_Checkbox__c:');\r\n    console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);\r\n    if (quote.record[\"SBQQ__Type__c\"] == 'Renewal' && quote.record[\"LPCR_Added_Product_Using_QCP__c\"] == false && quote.record[\"LPCR_Contracted_Checkbox__c\"] == true) {\r\n        var newRecords = [];\r\n\r\n        var conditions = {\r\n            ProductCode: 'FraisInscriptionMac'\r\n        };\r\n        var fields = ['Id', 'ProductCode'];\r\n        return conn.sobject('Product2')\r\n            .find(conditions, fields)\r\n            .execute(function(err, records) {\r\n                console.log(records);\r\n                var product = records[0].Id;\r\n                console.log('product ' + product);\r\n                if (err) {\r\n                    return Promise.reject(err);\r\n                } else {\r\n\r\n                    if (true) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        newRecords.push({\r\n                            SBQQ__Product__c: product,\r\n                            SBQQ__Quote__c: quote.record[\"Id\"],\r\n                            SBQQ__Number__c: 100\r\n                        });\r\n                    }\r\n                    if (newRecords.length) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        return conn.sobject('SBQQ__QuoteLine__c').create(newRecords, function(err, ret) {\r\n                            console.log(ret);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n    return Promise.resolve();\r\n\r\n}\r\n\r\n\r\nexport function onBeforeCalculate(quoteModel, quoteLineModels, conn) {\r\n\r\nquoteModel.record[\"SBQQ__SubscriptionTerm__c\"] = 100;\r\n\r\nconsole.log('onBeforePriceRules : ');\r\n    console.log(quoteModel);\r\n\r\n    let recordTypeMap = new Map();\r\n    var qliUpgradedSubscriptionList = [];\r\n    let qliUpgradedSubscriptionMap = new Map();\r\n\r\n    if (quoteLineModels) {\r\n        quoteLineModels.forEach(function(line) {\r\n\r\n\r\n\r\n\r\n            if (line.record['SBQQ__UpgradedSubscription__c']) {\r\n                qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);\r\n            }\r\n        });\r\n        if (qliUpgradedSubscriptionList.length) {\r\n            var codeList = \"('\" + qliUpgradedSubscriptionList.join(\"', '\") + \"')\";\r\n\r\n             conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN ' + codeList)\r\n                .then(function(results) {\r\n                    if (results.totalSize) {\r\n                        console.log('@@@ SBQQ__UpgradedSubscription__c ');\r\n                        results.records.forEach(function(record) {\r\n                            console.log(record);\r\n                            qliUpgradedSubscriptionMap.set(''+record.Id, record.SBQQ__EndDate__c);\r\n                        });\r\n                    }\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.log('@@@ qliUpgradedSubscriptionMap values');\r\n\t\t\t\t\tconsole.log(qliUpgradedSubscriptionMap);\r\n\t\t\t\t\t\r\n                    \r\n                });\r\n        }\r\n\t\t\r\n\t\tif (quoteModel) {\r\n\r\n\r\n\r\n                        var conditions = {\r\n                            DeveloperName: 'Referencement',\r\n                            SobjectType: 'SBQQ__Quote__c'\r\n                        };\r\n                        var fields = ['Id', 'DeveloperName'];\r\n                        return conn.sobject('RecordType')\r\n                            .find(conditions, fields)\r\n                            .execute(function(err, records) {\r\n                                if (typeof records !== 'undefined') {\r\n                                    records.forEach(function(recordType) {\r\n                                        recordTypeMap.set(recordType.Id, recordType.DeveloperName);\r\n                                    });\r\n                                }\r\n                                console.log(recordTypeMap);\r\n\r\n                                if (typeof quoteLineModels !== 'undefined') {\r\n                                    quoteLineModels.forEach(function(line) {\r\n                                        console.log('@@@ QLI ');\r\n                                        console.log(line);\r\n\r\n                                        line.record['SBQQ__SubscriptionTerm__c'] = 1000;\r\n\r\n                                        var quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                        var quoteEndDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__EndDate__c']);\r\n\r\n                                        console.log(quoteStartDate);\r\n                                        console.log(quoteEndDate);\r\n\r\n                                        if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] == 'Amendment') {\r\n                                            //we add this check to not override dates for the cloned line from ‘clone/cancel’ \r\n                                            // it will have the exact dates as the original QL\r\n                                            console.log('onBeforePriceRules RecordType and Type is true');\r\n                                            if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] === null) {\r\n                                                console.log('onBeforePriceRules  SBQQ_StartDate_c is NULL true');\r\n\r\n                                                //Not a Newly added QL in the amendment\r\n                                                if (line.record['SBQQ__PriorQuantity__c'] !== null) {\r\n                                                    console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null');\r\n                                                    line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//line.record['SBQQ__EndDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(line.record['SBQQ__UpgradedSubscription__c'] !== null){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null SBQQ__UpgradedSubscription__c');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n                                                    \r\n                                                } else {\r\n                                                    //Newly added QL in the amendment\r\n                                                    var DateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n                                                    var DateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                                    if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n                                                        if (DateDebut.getFullYear() === quoteStartDate.getFullYear()) {\r\n                                                            console.log('onBeforePriceRules  both year equal');\r\n                                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                                            line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                                            if (line.record['LPCR_DateFin__c'] != null && DateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                                                line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                                                console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');\r\n                                                            } else {\r\n                                                                line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                                                console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate>');\r\n                                                            }\r\n                                                        } else {\r\n                                                            line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                                            console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n\r\n                                            } else if (line.record['SBQQ__StartDate__c'] !== null && line.record['SBQQ__EndDate__c'] === null) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  only end date null'+ line.record['SBQQ__UpgradedSubscription__c']);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(line.record['SBQQ__UpgradedSubscription__c'] !== null){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  only end date null : set end date ' );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n                                                \r\n                                            } else if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] !== null) {\r\n                                                line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n                                            }\r\n                                        } else if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] != 'Amendment' && line.record['SBQQ__ChargeType__c'] == 'Recurring') {\r\n                                            \r\n                                            line.record['SBQQ__SubscriptionTerm__c'] = 999;\r\n\r\n                                            console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');\r\n                                            console.log('Date debut ' + line.record['LPCR_DateDebut__c']);\r\n                                            var quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                            console.log(quoteStartDate);\r\n\r\n                                            //is the QL supposed to  start in this year? already started?\r\n                                            if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\r\n                                                console.log('LPCR_DateDebut__c not null');\r\n                                                var dateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\r\n                                                if (dateDebut.getFullYear() <= quoteStartDate.getFullYear()) {\r\n                                                    //is the QL still alive in this year? not ended?\t\t\t\t\t\t\t\r\n\r\n                                                    console.log('LPCR_DateFin__c not null');\r\n                                                    var dateFin = new Date(line.record['LPCR_DateFin__c']);\r\n                                                    console.log(dateFin);\r\n\r\n                                                    if (dateFin.getFullYear() >= quoteStartDate.getFullYear()) {\r\n\r\n                                                        line.record['LPCR_HoldBilling__c'] = 'No';\r\n                                                        console.log('onBeforePriceRules  LPCR_HoldBilling__c is set No');\r\n\r\n                                                        //SBQQ__EndDate__c logic\r\n                                                        if (dateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n\r\n                                                            line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                                            console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');\r\n                                                        } else {\r\n\r\n                                                            line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                                            console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate> ' + line.record['SBQQ__EndDate__c']);\r\n                                                        }\r\n\r\n                                                        //SBQQ__StartDate__c logic\r\n                                                        if (dateDebut.getFullYear() == quoteStartDate.getFullYear()) {\r\n                                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                                            console.log('onBeforePriceRules  SBQQ__StartDate__c is set line LPCR_DateDebut__c');\r\n                                                        }\r\n                                                    } else {\r\n\r\n                                                        line.record['SBQQ__Quantity__c'] = 0;\r\n                                                        console.log('onBeforePriceRules  SBQQ__Quantity__c is set 0');\r\n                                                    }\r\n                                                } else {\r\n                                                    line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                                    console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    });\r\n                                }\r\n                            });\r\n                    }\r\n    }\r\n    console.log('@@@ codeList ');\r\n    console.log(codeList);\r\n\r\n\r\n    if (quoteLineModels) {\r\n        lines.forEach((line) => {\r\n            const consumptionUnitPrice = line.record['LPCR_TauxHoraire__c'];\r\n\r\n            if (consumptionUnitPrice > 0 && line.consumptionSchedules) {\r\n                line.consumptionSchedules.forEach((cs, index) => {\r\n                    const rates = cs.getRates();\r\n                    if (rates) {\r\n                        rates.forEach((rate, index) => {\r\n                            const newPrice = consumptionUnitPrice;\r\n                            rate.set('SBQQ__Price__c', newPrice);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforePriceRules(quoteModel, quoteLineModels, conn) {\r\n    console.log('onBeforePriceRules : ');\r\n    console.log(quoteModel);\r\n\r\n    let recordTypeMap = new Map();\r\n    var qliUpgradedSubscriptionList = [];\r\n    let qliUpgradedSubscriptionMap = new Map();\r\n\r\n    if (quoteLineModels) {\r\n        quoteLineModels.forEach(function(line) {\r\n            if (line.record['SBQQ__UpgradedSubscription__c']) {\r\n                qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);\r\n            }\r\n        });\r\n        if (qliUpgradedSubscriptionList.length) {\r\n            var codeList = \"('\" + qliUpgradedSubscriptionList.join(\"', '\") + \"')\";\r\n\r\n             conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN ' + codeList)\r\n                .then(function(results) {\r\n                    if (results.totalSize) {\r\n                        console.log('@@@ SBQQ__UpgradedSubscription__c ');\r\n                        results.records.forEach(function(record) {\r\n                            console.log(record);\r\n                            qliUpgradedSubscriptionMap.set(''+record.Id, record.SBQQ__EndDate__c);\r\n                        });\r\n                    }\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.log('@@@ qliUpgradedSubscriptionMap values');\r\n\t\t\t\t\tconsole.log(qliUpgradedSubscriptionMap);\r\n\t\t\t\t\t\r\n                    \r\n                });\r\n        }\r\n\t\t\r\n\t\tif (quoteModel) {\r\n                        var conditions = {\r\n                            DeveloperName: 'Referencement',\r\n                            SobjectType: 'SBQQ__Quote__c'\r\n                        };\r\n                        var fields = ['Id', 'DeveloperName'];\r\n                        return conn.sobject('RecordType')\r\n                            .find(conditions, fields)\r\n                            .execute(function(err, records) {\r\n                                if (typeof records !== 'undefined') {\r\n                                    records.forEach(function(recordType) {\r\n                                        recordTypeMap.set(recordType.Id, recordType.DeveloperName);\r\n                                    });\r\n                                }\r\n                                console.log(recordTypeMap);\r\n\r\n                                if (typeof quoteLineModels !== 'undefined') {\r\n                                    quoteLineModels.forEach(function(line) {\r\n                                        console.log('@@@ QLI ');\r\n                                        console.log(line);\r\n\r\n                                        var quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                        var quoteEndDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__EndDate__c']);\r\n\r\n                                        console.log(quoteStartDate);\r\n                                        console.log(quoteEndDate);\r\n\r\n                                        if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] == 'Amendment') {\r\n                                            //we add this check to not override dates for the cloned line from ‘clone/cancel’ \r\n                                            // it will have the exact dates as the original QL\r\n                                            console.log('onBeforePriceRules RecordType and Type is true');\r\n                                            if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] === null) {\r\n                                                console.log('onBeforePriceRules  SBQQ_StartDate_c is NULL true');\r\n\r\n                                                //Not a Newly added QL in the amendment\r\n                                                if (line.record['SBQQ__PriorQuantity__c'] !== null) {\r\n                                                    console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null');\r\n                                                    line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t//line.record['SBQQ__EndDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(line.record['SBQQ__UpgradedSubscription__c'] !== null){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null SBQQ__UpgradedSubscription__c');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n                                                    \r\n                                                } else {\r\n                                                    //Newly added QL in the amendment\r\n                                                    var DateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n                                                    var DateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                                    if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n                                                        if (DateDebut.getFullYear() === quoteStartDate.getFullYear()) {\r\n                                                            console.log('onBeforePriceRules  both year equal');\r\n                                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                                            line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                                            if (line.record['LPCR_DateFin__c'] != null && DateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                                                line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                                                console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');\r\n                                                            } else {\r\n                                                                line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                                                console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate>');\r\n                                                            }\r\n                                                        } else {\r\n                                                            line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                                            console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n\r\n                                            } else if (line.record['SBQQ__StartDate__c'] !== null && line.record['SBQQ__EndDate__c'] === null) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  only end date null'+ line.record['SBQQ__UpgradedSubscription__c']);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(line.record['SBQQ__UpgradedSubscription__c'] !== null){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  only end date null : set end date ' );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n                                                \r\n                                            } else if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] !== null) {\r\n                                                line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n                                            }\r\n                                        } else if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] != 'Amendment' && line.record['SBQQ__ChargeType__c'] == 'Recurring') {\r\n\r\n                                            console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');\r\n                                            console.log('Date debut ' + line.record['LPCR_DateDebut__c']);\r\n                                            var quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                            console.log(quoteStartDate);\r\n\r\n                                            //is the QL supposed to  start in this year? already started?\r\n                                            if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\r\n                                                console.log('LPCR_DateDebut__c not null');\r\n                                                var dateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\r\n                                                if (dateDebut.getFullYear() <= quoteStartDate.getFullYear()) {\r\n                                                    //is the QL still alive in this year? not ended?\t\t\t\t\t\t\t\r\n\r\n                                                    console.log('LPCR_DateFin__c not null');\r\n                                                    var dateFin = new Date(line.record['LPCR_DateFin__c']);\r\n                                                    console.log(dateFin);\r\n\r\n                                                    if (dateFin.getFullYear() >= quoteStartDate.getFullYear()) {\r\n\r\n                                                        line.record['LPCR_HoldBilling__c'] = 'No';\r\n                                                        console.log('onBeforePriceRules  LPCR_HoldBilling__c is set No');\r\n\r\n                                                        //SBQQ__EndDate__c logic\r\n                                                        if (dateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n\r\n                                                            line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                                            console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');\r\n                                                        } else {\r\n\r\n                                                            line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                                            console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate> ' + line.record['SBQQ__EndDate__c']);\r\n                                                        }\r\n\r\n                                                        //SBQQ__StartDate__c logic\r\n                                                        if (dateDebut.getFullYear() == quoteStartDate.getFullYear()) {\r\n                                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                                            console.log('onBeforePriceRules  SBQQ__StartDate__c is set line LPCR_DateDebut__c');\r\n                                                        }\r\n                                                    } else {\r\n\r\n                                                        line.record['SBQQ__Quantity__c'] = 0;\r\n                                                        console.log('onBeforePriceRules  SBQQ__Quantity__c is set 0');\r\n                                                    }\r\n                                                } else {\r\n                                                    line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                                    console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    });\r\n                                }\r\n                            });\r\n                    }\r\n    }\r\n    console.log('@@@ codeList ');\r\n    console.log(codeList);\r\n\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function isFieldVisibleForObject(fieldName, quote, conn, objectName) {\r\n\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_TypeAvenant__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_DateResiliation__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n};",
            "SBQQ__QuoteFields__c": "LPCR_Added_Product_Using_QCP__c\r\nLPCR_Contracted_Checkbox__c",
            "SBQQ__QuoteLineFields__c": "LPCR_TauxHoraire__c\r\nLPCR_HoldBilling__c",
            "SBQQ__TranspiledCode__c": "'use strict';System.register('QCPlugin____UIDFiller____',[],function(_export,_context){\"use strict\";function onAfterCalculate(quote,lines,conn){console.log('Quote : '+quote.record[\"Id\"]);console.log('LPCR_Contracted_Checkbox__c:');console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);if(quote.record[\"SBQQ__Type__c\"]=='Renewal'&&quote.record[\"LPCR_Added_Product_Using_QCP__c\"]==false&&quote.record[\"LPCR_Contracted_Checkbox__c\"]==true){var newRecords=[];var conditions={ProductCode:'FraisInscriptionMac'};var fields=['Id','ProductCode'];return conn.sobject('Product2').find(conditions,fields).execute(function(err,records){console.log(records);var product=records[0].Id;console.log('product '+product);if(err){return Promise.reject(err);}else{if(true){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;newRecords.push({SBQQ__Product__c:product,SBQQ__Quote__c:quote.record[\"Id\"],SBQQ__Number__c:100});}if(newRecords.length){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;return conn.sobject('SBQQ__QuoteLine__c').create(newRecords,function(err,ret){console.log(ret);});}}});}return Promise.resolve();}_export('onAfterCalculate',onAfterCalculate);function onBeforeCalculate(quoteModel,quoteLineModels,conn){quoteModel.record[\"SBQQ__SubscriptionTerm__c\"]=100;console.log('onBeforePriceRules : ');console.log(quoteModel);var recordTypeMap=new Map();var qliUpgradedSubscriptionList=[];var qliUpgradedSubscriptionMap=new Map();if(quoteLineModels){quoteLineModels.forEach(function(line){if(line.record['SBQQ__UpgradedSubscription__c']){qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);}});if(qliUpgradedSubscriptionList.length){var codeList=\"('\"+qliUpgradedSubscriptionList.join(\"', '\")+\"')\";conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN '+codeList).then(function(results){if(results.totalSize){console.log('@@@ SBQQ__UpgradedSubscription__c ');results.records.forEach(function(record){console.log(record);qliUpgradedSubscriptionMap.set(''+record.Id,record.SBQQ__EndDate__c);});}console.log('@@@ qliUpgradedSubscriptionMap values');console.log(qliUpgradedSubscriptionMap);});}if(quoteModel){var conditions={DeveloperName:'Referencement',SobjectType:'SBQQ__Quote__c'};var fields=['Id','DeveloperName'];return conn.sobject('RecordType').find(conditions,fields).execute(function(err,records){if(typeof records!=='undefined'){records.forEach(function(recordType){recordTypeMap.set(recordType.Id,recordType.DeveloperName);});}console.log(recordTypeMap);if(typeof quoteLineModels!=='undefined'){quoteLineModels.forEach(function(line){console.log('@@@ QLI ');console.log(line);line.record['SBQQ__SubscriptionTerm__c']=1000;var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);var quoteEndDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__EndDate__c']);console.log(quoteStartDate);console.log(quoteEndDate);if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']=='Amendment'){//we add this check to not override dates for the cloned line from ‘clone/cancel’ \n// it will have the exact dates as the original QL\nconsole.log('onBeforePriceRules RecordType and Type is true');if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']===null){console.log('onBeforePriceRules  SBQQ_StartDate_c is NULL true');//Not a Newly added QL in the amendment\nif(line.record['SBQQ__PriorQuantity__c']!==null){console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null');line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];//line.record['SBQQ__EndDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\nif(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null SBQQ__UpgradedSubscription__c');line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else{//Newly added QL in the amendment\nvar DateDebut=new Date(line.record['LPCR_DateDebut__c']);var DateFin=new Date(line.record['LPCR_DateFin__c']);if(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){if(DateDebut.getFullYear()===quoteStartDate.getFullYear()){console.log('onBeforePriceRules  both year equal');line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];line.record['LPCR_HoldBilling__c']='No';if(line.record['LPCR_DateFin__c']!=null&&DateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate>');}}else{line.record['LPCR_HoldBilling__c']='Yes';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');}}}}else if(line.record['SBQQ__StartDate__c']!==null&&line.record['SBQQ__EndDate__c']===null){console.log('onBeforePriceRules  only end date null'+line.record['SBQQ__UpgradedSubscription__c']);if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){console.log('onBeforePriceRules  only end date null : set end date ');console.log(qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']));line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']!==null){line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];}}else if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']!='Amendment'&&line.record['SBQQ__ChargeType__c']=='Recurring'){line.record['SBQQ__SubscriptionTerm__c']=999;console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');console.log('Date debut '+line.record['LPCR_DateDebut__c']);var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);console.log(quoteStartDate);//is the QL supposed to  start in this year? already started?\nif(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){console.log('LPCR_DateDebut__c not null');var dateDebut=new Date(line.record['LPCR_DateDebut__c']);if(dateDebut.getFullYear()<=quoteStartDate.getFullYear()){//is the QL still alive in this year? not ended?\t\t\t\t\t\t\t\nconsole.log('LPCR_DateFin__c not null');var dateFin=new Date(line.record['LPCR_DateFin__c']);console.log(dateFin);if(dateFin.getFullYear()>=quoteStartDate.getFullYear()){line.record['LPCR_HoldBilling__c']='No';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set No');//SBQQ__EndDate__c logic\nif(dateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate> '+line.record['SBQQ__EndDate__c']);}//SBQQ__StartDate__c logic\nif(dateDebut.getFullYear()==quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];console.log('onBeforePriceRules  SBQQ__StartDate__c is set line LPCR_DateDebut__c');}}else{line.record['SBQQ__Quantity__c']=0;console.log('onBeforePriceRules  SBQQ__Quantity__c is set 0');}}else{line.record['LPCR_HoldBilling__c']='Yes';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');}}}});}});}}console.log('@@@ codeList ');console.log(codeList);if(quoteLineModels){lines.forEach(function(line){var consumptionUnitPrice=line.record['LPCR_TauxHoraire__c'];if(consumptionUnitPrice>0&&line.consumptionSchedules){line.consumptionSchedules.forEach(function(cs,index){var rates=cs.getRates();if(rates){rates.forEach(function(rate,index){var newPrice=consumptionUnitPrice;rate.set('SBQQ__Price__c',newPrice);});}});}});}return Promise.resolve();}_export('onBeforeCalculate',onBeforeCalculate);function onBeforePriceRules(quoteModel,quoteLineModels,conn){console.log('onBeforePriceRules : ');console.log(quoteModel);var recordTypeMap=new Map();var qliUpgradedSubscriptionList=[];var qliUpgradedSubscriptionMap=new Map();if(quoteLineModels){quoteLineModels.forEach(function(line){if(line.record['SBQQ__UpgradedSubscription__c']){qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);}});if(qliUpgradedSubscriptionList.length){var codeList=\"('\"+qliUpgradedSubscriptionList.join(\"', '\")+\"')\";conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN '+codeList).then(function(results){if(results.totalSize){console.log('@@@ SBQQ__UpgradedSubscription__c ');results.records.forEach(function(record){console.log(record);qliUpgradedSubscriptionMap.set(''+record.Id,record.SBQQ__EndDate__c);});}console.log('@@@ qliUpgradedSubscriptionMap values');console.log(qliUpgradedSubscriptionMap);});}if(quoteModel){var conditions={DeveloperName:'Referencement',SobjectType:'SBQQ__Quote__c'};var fields=['Id','DeveloperName'];return conn.sobject('RecordType').find(conditions,fields).execute(function(err,records){if(typeof records!=='undefined'){records.forEach(function(recordType){recordTypeMap.set(recordType.Id,recordType.DeveloperName);});}console.log(recordTypeMap);if(typeof quoteLineModels!=='undefined'){quoteLineModels.forEach(function(line){console.log('@@@ QLI ');console.log(line);var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);var quoteEndDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__EndDate__c']);console.log(quoteStartDate);console.log(quoteEndDate);if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']=='Amendment'){//we add this check to not override dates for the cloned line from ‘clone/cancel’ \n// it will have the exact dates as the original QL\nconsole.log('onBeforePriceRules RecordType and Type is true');if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']===null){console.log('onBeforePriceRules  SBQQ_StartDate_c is NULL true');//Not a Newly added QL in the amendment\nif(line.record['SBQQ__PriorQuantity__c']!==null){console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null');line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];//line.record['SBQQ__EndDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\nif(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null SBQQ__UpgradedSubscription__c');line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else{//Newly added QL in the amendment\nvar DateDebut=new Date(line.record['LPCR_DateDebut__c']);var DateFin=new Date(line.record['LPCR_DateFin__c']);if(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){if(DateDebut.getFullYear()===quoteStartDate.getFullYear()){console.log('onBeforePriceRules  both year equal');line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];line.record['LPCR_HoldBilling__c']='No';if(line.record['LPCR_DateFin__c']!=null&&DateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate>');}}else{line.record['LPCR_HoldBilling__c']='Yes';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');}}}}else if(line.record['SBQQ__StartDate__c']!==null&&line.record['SBQQ__EndDate__c']===null){console.log('onBeforePriceRules  only end date null'+line.record['SBQQ__UpgradedSubscription__c']);if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){console.log('onBeforePriceRules  only end date null : set end date ');console.log(qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']));line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']!==null){line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];}}else if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']!='Amendment'&&line.record['SBQQ__ChargeType__c']=='Recurring'){console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');console.log('Date debut '+line.record['LPCR_DateDebut__c']);var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);console.log(quoteStartDate);//is the QL supposed to  start in this year? already started?\nif(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){console.log('LPCR_DateDebut__c not null');var dateDebut=new Date(line.record['LPCR_DateDebut__c']);if(dateDebut.getFullYear()<=quoteStartDate.getFullYear()){//is the QL still alive in this year? not ended?\t\t\t\t\t\t\t\nconsole.log('LPCR_DateFin__c not null');var dateFin=new Date(line.record['LPCR_DateFin__c']);console.log(dateFin);if(dateFin.getFullYear()>=quoteStartDate.getFullYear()){line.record['LPCR_HoldBilling__c']='No';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set No');//SBQQ__EndDate__c logic\nif(dateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate> '+line.record['SBQQ__EndDate__c']);}//SBQQ__StartDate__c logic\nif(dateDebut.getFullYear()==quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];console.log('onBeforePriceRules  SBQQ__StartDate__c is set line LPCR_DateDebut__c');}}else{line.record['SBQQ__Quantity__c']=0;console.log('onBeforePriceRules  SBQQ__Quantity__c is set 0');}}else{line.record['LPCR_HoldBilling__c']='Yes';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');}}}});}});}}console.log('@@@ codeList ');console.log(codeList);return Promise.resolve();}_export('onBeforePriceRules',onBeforePriceRules);function isFieldVisibleForObject(fieldName,quote,conn,objectName){if(objectName==='Quote__c'&&fieldName==='LPCR_TypeAvenant__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}if(objectName==='Quote__c'&&fieldName==='LPCR_DateResiliation__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}}_export('isFieldVisibleForObject',isFieldVisibleForObject);return{setters:[],execute:function(){;}};});"
        },
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef2"
            },
            "IsDeleted": false,
            "Name": "QuoteCalculatorPlugin working without FIlter for Record Type",
            "SBQQ__Code__c": "export function onAfterCalculate(quote, lines, conn) {\r\n    console.log('Quote : ' + quote.record[\"Id\"]);\r\n    console.log('LPCR_Contracted_Checkbox__c:');\r\n    console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);\r\n    if (quote.record[\"SBQQ__Type__c\"] == 'Renewal' && quote.record[\"LPCR_Added_Product_Using_QCP__c\"] == false && quote.record[\"LPCR_Contracted_Checkbox__c\"] == true) {\r\n        var newRecords = [];\r\n\r\n        var conditions = {\r\n            ProductCode: 'FraisInscriptionMac'\r\n        };\r\n        var fields = ['Id', 'ProductCode'];\r\n        return conn.sobject('Product2')\r\n            .find(conditions, fields)\r\n            .execute(function(err, records) {\r\n                console.log(records);\r\n                var product = records[0].Id;\r\n                console.log('product ' + product);\r\n                if (err) {\r\n                    return Promise.reject(err);\r\n                } else {\r\n\r\n                    if (true) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        newRecords.push({\r\n                            SBQQ__Product__c: product,\r\n                            SBQQ__Quote__c: quote.record[\"Id\"],\r\n                            SBQQ__Number__c: 100\r\n                        });\r\n                    }\r\n                    if (newRecords.length) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        return conn.sobject('SBQQ__QuoteLine__c').create(newRecords, function(err, ret) {\r\n                            console.log(ret);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforeCalculate(quoteModel, lines, conn) {\r\n    if (lines) {\r\n        lines.forEach((line) => {\r\n            const consumptionUnitPrice = line.record['LPCR_TauxHoraire__c'];\r\n\r\n            if (consumptionUnitPrice > 0 && line.consumptionSchedules) {\r\n                line.consumptionSchedules.forEach((cs, index) => {\r\n                    const rates = cs.getRates();\r\n                    if (rates) {\r\n                        rates.forEach((rate, index) => {\r\n                            const newPrice = consumptionUnitPrice;\r\n                            rate.set('SBQQ__Price__c', newPrice);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforePriceRules(quoteModel, quoteLineModels, conn) {\r\n    console.log('onBeforePriceRules: ');\r\n    console.log(quoteModel);\r\n\r\n    let recordTypeMap = new Map();\r\n    var qliUpgradedSubscriptionList = [];\r\n    let qliUpgradedSubscriptionMap = new Map();\r\n\r\n    if (quoteLineModels) {\r\n        quoteLineModels.forEach(function(line) {\r\n            if (line.record['SBQQ__UpgradedSubscription__c']) {\r\n                qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);\r\n            }\r\n        });\r\n        if (qliUpgradedSubscriptionList.length) {\r\n            var codeList = \"('\" + qliUpgradedSubscriptionList.join(\"', '\") + \"')\";\r\n\r\n            conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN ' + codeList)\r\n                .then(function(results) {\r\n                    if (results.totalSize) {\r\n                        results.records.forEach(function(record) {\r\n                            qliUpgradedSubscriptionMap.set('' + record.Id, record.SBQQ__EndDate__c);\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n        if (quoteModel) {\r\n            var conditions = {\r\n                DeveloperName: 'Referencement',\r\n                SobjectType: 'SBQQ__Quote__c'\r\n            };\r\n            var fields = ['Id', 'DeveloperName'];\r\n            return conn.sobject('RecordType')\r\n                .find(conditions, fields)\r\n                .execute(function(err, records) {\r\n                    if (typeof records !== 'undefined') {\r\n                        records.forEach(function(recordType) {\r\n                            recordTypeMap.set(recordType.Id, recordType.DeveloperName);\r\n                        });\r\n                    }\r\n\r\n                    if (typeof quoteLineModels !== 'undefined') {\r\n                        quoteLineModels.forEach(function(line) {\r\n\t\t\t\t\t\t\t\r\n                            if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] == 'Amendment') {\r\n                                //we add this check to not override dates for the cloned line from ‘clone/cancel’ \r\n                                // it will have the exact dates as the original QL\r\n                                console.log('onBeforePriceRules RecordType and Type is true');\r\n                                if (line.record['LPCR_Clone__c'] == false && line.record['SBQQ__PriorQuantity__c'] != null) {\r\n                                    if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] === null) {\r\n\r\n                                        //Not a Newly added QL in the amendment\r\n                                        line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\r\n                                        if (line.record['SBQQ__UpgradedSubscription__c'] !== null) {\r\n                                            if (qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])) {\r\n                                                line.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n                                            }\r\n                                        }\r\n                                    } else if (line.record['SBQQ__StartDate__c'] !== null && line.record['SBQQ__EndDate__c'] === null) {\r\n                                        if (line.record['SBQQ__UpgradedSubscription__c'] !== null) {\r\n                                            if (qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])) {\r\n                                                line.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\r\n                                            }\r\n                                        }\r\n\r\n                                    } else if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] !== null) {\r\n                                        line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n                                    }\r\n                                } else if (line.record['LPCR_Clone__c'] == false && line.record['SBQQ__PriorQuantity__c'] == null) {\r\n                                    //Newly added QL in the amendment\r\n                                    var DateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n                                    var DateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                    if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\t\t\t\t\t\t\t\t\t\tvar quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                        if (DateDebut.getFullYear() === quoteStartDate.getFullYear()) {\r\n                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                            line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                            if (line.record['LPCR_DateFin__c'] != null && DateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                                line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                            } else {\r\n                                                line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                            }\r\n                                        } else {\r\n                                            line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            } else if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] != 'Amendment' && line.record['SBQQ__ChargeType__c'] == 'Recurring') {\r\n                                console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');                                \r\n\r\n                                //is the QL supposed to  start in this year? already started?\r\n                                if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\t\t\t\t\t\t\t\t\tvar quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                    var dateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\r\n                                    if (dateDebut.getFullYear() <= quoteStartDate.getFullYear()) {\r\n                                        //is the QL still alive in this year? not ended?\t\r\n                                        var dateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                        if (dateFin.getFullYear() >= quoteStartDate.getFullYear()) {\r\n\r\n                                            line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                            //SBQQ__EndDate__c logic\r\n                                            if (dateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                                line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                            } else {\r\n                                                line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                            }\r\n\r\n                                            //SBQQ__StartDate__c logic\r\n                                            if (dateDebut.getFullYear() == quoteStartDate.getFullYear()) {\r\n                                                line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                            }\r\n                                        } else {\r\n                                            line.record['SBQQ__Quantity__c'] = 0;\r\n                                        }\r\n                                    } else {\r\n                                        line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function isFieldVisibleForObject(fieldName, quote, conn, objectName) {\r\n\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_TypeAvenant__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_DateResiliation__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n};",
            "SBQQ__QuoteFields__c": "LPCR_Added_Product_Using_QCP__c\r\nLPCR_Contracted_Checkbox__c",
            "SBQQ__QuoteLineFields__c": "LPCR_TauxHoraire__c\r\nLPCR_HoldBilling__c\r\nLPCR_Clone__c",
            "SBQQ__TranspiledCode__c": "'use strict';System.register('QCPlugin____UIDFiller____',[],function(_export,_context){\"use strict\";function onAfterCalculate(quote,lines,conn){console.log('Quote : '+quote.record[\"Id\"]);console.log('LPCR_Contracted_Checkbox__c:');console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);if(quote.record[\"SBQQ__Type__c\"]=='Renewal'&&quote.record[\"LPCR_Added_Product_Using_QCP__c\"]==false&&quote.record[\"LPCR_Contracted_Checkbox__c\"]==true){var newRecords=[];var conditions={ProductCode:'FraisInscriptionMac'};var fields=['Id','ProductCode'];return conn.sobject('Product2').find(conditions,fields).execute(function(err,records){console.log(records);var product=records[0].Id;console.log('product '+product);if(err){return Promise.reject(err);}else{if(true){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;newRecords.push({SBQQ__Product__c:product,SBQQ__Quote__c:quote.record[\"Id\"],SBQQ__Number__c:100});}if(newRecords.length){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;return conn.sobject('SBQQ__QuoteLine__c').create(newRecords,function(err,ret){console.log(ret);});}}});}return Promise.resolve();}_export('onAfterCalculate',onAfterCalculate);function onBeforeCalculate(quoteModel,lines,conn){if(lines){lines.forEach(function(line){var consumptionUnitPrice=line.record['LPCR_TauxHoraire__c'];if(consumptionUnitPrice>0&&line.consumptionSchedules){line.consumptionSchedules.forEach(function(cs,index){var rates=cs.getRates();if(rates){rates.forEach(function(rate,index){var newPrice=consumptionUnitPrice;rate.set('SBQQ__Price__c',newPrice);});}});}});}return Promise.resolve();}_export('onBeforeCalculate',onBeforeCalculate);function onBeforePriceRules(quoteModel,quoteLineModels,conn){console.log('onBeforePriceRules: ');console.log(quoteModel);var recordTypeMap=new Map();var qliUpgradedSubscriptionList=[];var qliUpgradedSubscriptionMap=new Map();if(quoteLineModels){quoteLineModels.forEach(function(line){if(line.record['SBQQ__UpgradedSubscription__c']){qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);}});if(qliUpgradedSubscriptionList.length){var codeList=\"('\"+qliUpgradedSubscriptionList.join(\"', '\")+\"')\";conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN '+codeList).then(function(results){if(results.totalSize){results.records.forEach(function(record){qliUpgradedSubscriptionMap.set(''+record.Id,record.SBQQ__EndDate__c);});}});}if(quoteModel){var conditions={DeveloperName:'Referencement',SobjectType:'SBQQ__Quote__c'};var fields=['Id','DeveloperName'];return conn.sobject('RecordType').find(conditions,fields).execute(function(err,records){if(typeof records!=='undefined'){records.forEach(function(recordType){recordTypeMap.set(recordType.Id,recordType.DeveloperName);});}if(typeof quoteLineModels!=='undefined'){quoteLineModels.forEach(function(line){if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']=='Amendment'){//we add this check to not override dates for the cloned line from ‘clone/cancel’ \n// it will have the exact dates as the original QL\nconsole.log('onBeforePriceRules RecordType and Type is true');if(line.record['LPCR_Clone__c']==false&&line.record['SBQQ__PriorQuantity__c']!=null){if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']===null){//Not a Newly added QL in the amendment\nline.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']!==null&&line.record['SBQQ__EndDate__c']===null){if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']!==null){line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];}}else if(line.record['LPCR_Clone__c']==false&&line.record['SBQQ__PriorQuantity__c']==null){//Newly added QL in the amendment\nvar DateDebut=new Date(line.record['LPCR_DateDebut__c']);var DateFin=new Date(line.record['LPCR_DateFin__c']);if(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);if(DateDebut.getFullYear()===quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];line.record['LPCR_HoldBilling__c']='No';if(line.record['LPCR_DateFin__c']!=null&&DateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';}}else{line.record['LPCR_HoldBilling__c']='Yes';}}}}else if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']!='Amendment'&&line.record['SBQQ__ChargeType__c']=='Recurring'){console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');//is the QL supposed to  start in this year? already started?\nif(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);var dateDebut=new Date(line.record['LPCR_DateDebut__c']);if(dateDebut.getFullYear()<=quoteStartDate.getFullYear()){//is the QL still alive in this year? not ended?\t\nvar dateFin=new Date(line.record['LPCR_DateFin__c']);if(dateFin.getFullYear()>=quoteStartDate.getFullYear()){line.record['LPCR_HoldBilling__c']='No';//SBQQ__EndDate__c logic\nif(dateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';}//SBQQ__StartDate__c logic\nif(dateDebut.getFullYear()==quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];}}else{line.record['SBQQ__Quantity__c']=0;}}else{line.record['LPCR_HoldBilling__c']='Yes';}}}});}});}}return Promise.resolve();}_export('onBeforePriceRules',onBeforePriceRules);function isFieldVisibleForObject(fieldName,quote,conn,objectName){if(objectName==='Quote__c'&&fieldName==='LPCR_TypeAvenant__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}if(objectName==='Quote__c'&&fieldName==='LPCR_DateResiliation__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}}_export('isFieldVisibleForObject',isFieldVisibleForObject);return{setters:[],execute:function(){;}};});"
        },
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef3"
            },
            "IsDeleted": false,
            "Name": "QuoteCalculatorPlugin",
            "SBQQ__Code__c": "export function onAfterCalculate(quote, lines, conn) {\r\n    console.log('Quote : ' + quote.record[\"Id\"]);\r\n    console.log('LPCR_Contracted_Checkbox__c:');\r\n    console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);\r\n    if (quote.record[\"SBQQ__Type__c\"] == 'Renewal' && quote.record[\"LPCR_Added_Product_Using_QCP__c\"] == false && quote.record[\"LPCR_Contracted_Checkbox__c\"] == true) {\r\n        var newRecords = [];\r\n\r\n        var conditions = {\r\n            ProductCode: 'FraisInscriptionMac'\r\n        };\r\n        var fields = ['Id', 'ProductCode'];\r\n        return conn.sobject('Product2')\r\n            .find(conditions, fields)\r\n            .execute(function(err, records) {\r\n                console.log(records);\r\n                var product = records[0].Id;\r\n                console.log('product ' + product);\r\n                if (err) {\r\n                    return Promise.reject(err);\r\n                } else {\r\n\r\n                    if (true) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        newRecords.push({\r\n                            SBQQ__Product__c: product,\r\n                            SBQQ__Quote__c: quote.record[\"Id\"],\r\n                            SBQQ__Number__c: 100\r\n                        });\r\n                    }\r\n                    if (newRecords.length) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        return conn.sobject('SBQQ__QuoteLine__c').create(newRecords, function(err, ret) {\r\n                            console.log(ret);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforeCalculate(quoteModel, lines, conn) {\r\n    if (lines) {\r\n        lines.forEach((line) => {\r\n            const consumptionUnitPrice = line.record['LPCR_TauxHoraire__c'];\r\n\r\n            if (consumptionUnitPrice > 0 && line.consumptionSchedules) {\r\n                line.consumptionSchedules.forEach((cs, index) => {\r\n                    const rates = cs.getRates();\r\n                    if (rates) {\r\n                        rates.forEach((rate, index) => {\r\n                            const newPrice = consumptionUnitPrice;\r\n                            rate.set('SBQQ__Price__c', newPrice);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforePriceRules(quoteModel, quoteLineModels, conn) {\r\n    console.log('onBeforePriceRules: ');\r\n    console.log(quoteModel);\r\n\r\n    let recordTypeMap = new Map();\r\n    var qliUpgradedSubscriptionList = [];\r\n    let qliUpgradedSubscriptionMap = new Map();\r\n\r\n    if (quoteLineModels) {\r\n        quoteLineModels.forEach(function(line) {\r\n            if (line.record['SBQQ__UpgradedSubscription__c']) {\r\n                qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);\r\n            }\r\n        });\r\n        if (qliUpgradedSubscriptionList.length) {\r\n            var codeList = \"('\" + qliUpgradedSubscriptionList.join(\"', '\") + \"')\";\r\n\r\n            conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN ' + codeList)\r\n                .then(function(results) {\r\n                    if (results.totalSize) {\r\n                        results.records.forEach(function(record) {\r\n                            qliUpgradedSubscriptionMap.set('' + record.Id, record.SBQQ__EndDate__c);\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n        // Get Quote RecordType Map\r\n        var recordTypeList = \"('Referencement','Referencement_Approuve')\";\r\n        var SobjectType = \"'SBQQ__Quote__c'\";\r\n\r\n        return conn.query('SELECT Id, DeveloperName FROM RecordType WHERE SobjectType = ' + SobjectType + ' AND DeveloperName IN ' + recordTypeList)\r\n            .then(function(results) {\r\n                if (results.totalSize) {\r\n                    results.records.forEach(function(record) {\r\n                        recordTypeMap.set('' + record.Id, record.DeveloperName);\r\n                    });\r\n                }\r\n                console.log('@@@recordTypeMap');\r\n                console.log(recordTypeMap);\r\n\r\n                if (typeof quoteLineModels !== 'undefined') {\r\n                    quoteLineModels.forEach(function(line) {\r\n                        console.log('@@@ QLI');\r\n\t\t\t\t\t\tconsole.log(line);\r\n                        if ((recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) || line.record['SBQQ__Quote__r']['RecordTypeId'] == null) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] == 'Amendment') {\r\n                            //we add this check to not override dates for the cloned line from ‘clone/cancel’ \r\n                            // it will have the exact dates as the original QL\r\n                            console.log('onBeforePriceRules RecordType and Type is true');\r\n                            if (line.record['LPCR_Clone__c'] == false && line.record['SBQQ__PriorQuantity__c'] != null) {\r\n                                if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] === null) {\r\n\r\n                                    //Not a Newly added QL in the amendment\r\n                                    line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\r\n                                    if (line.record['SBQQ__UpgradedSubscription__c'] !== null) {\r\n                                        if (qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])) {\r\n                                            line.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n                                        }\r\n                                    }\r\n                                } else if (line.record['SBQQ__StartDate__c'] !== null && line.record['SBQQ__EndDate__c'] === null) {\r\n                                    if (line.record['SBQQ__UpgradedSubscription__c'] !== null) {\r\n                                        if (qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])) {\r\n                                            line.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                } else if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] !== null) {\r\n                                    line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n                                }\r\n                            } else if (line.record['LPCR_Clone__c'] == false && line.record['SBQQ__PriorQuantity__c'] == null) {\r\n                                //Newly added QL in the amendment\r\n                                var DateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n                                var DateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n                                    var quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                    if (DateDebut.getFullYear() === quoteStartDate.getFullYear()) {\r\n                                        line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                        line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                        if (line.record['LPCR_DateFin__c'] != null && DateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                            line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                        } else {\r\n                                            line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                        }\r\n                                    } else {\r\n                                        line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                        } else if ((recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) || line.record['SBQQ__Quote__r']['RecordTypeId'] == null) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] != 'Amendment' && line.record['SBQQ__ChargeType__c'] == 'Recurring') {\r\n                            console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');\r\n\r\n                            //is the QL supposed to  start in this year? already started?\r\n                            if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n                                var quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                var dateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\r\n                                if (dateDebut.getFullYear() <= quoteStartDate.getFullYear()) {\r\n                                    //is the QL still alive in this year? not ended?\t\r\n                                    var dateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                    if (dateFin.getFullYear() >= quoteStartDate.getFullYear()) {\r\n\r\n                                        line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                        //SBQQ__EndDate__c logic\r\n                                        if (dateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                            line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                        } else {\r\n                                            line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                        }\r\n\r\n                                        //SBQQ__StartDate__c logic\r\n                                        if (dateDebut.getFullYear() == quoteStartDate.getFullYear()) {\r\n                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                        }\r\n                                    } else {\r\n                                        line.record['SBQQ__Quantity__c'] = 0;\r\n                                    }\r\n                                } else {\r\n                                    line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    });\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function isFieldVisibleForObject(fieldName, quote, conn, objectName) {\r\n\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_TypeAvenant__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_DateResiliation__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n;",
            "SBQQ__QuoteFields__c": "LPCR_Added_Product_Using_QCP__c\r\nLPCR_Contracted_Checkbox__c",
            "SBQQ__QuoteLineFields__c": "LPCR_TauxHoraire__c\r\nLPCR_HoldBilling__c\r\nLPCR_Clone__c",
            "SBQQ__TranspiledCode__c": "'use strict';System.register('QCPlugin____UIDFiller____',[],function(_export,_context){\"use strict\";function onAfterCalculate(quote,lines,conn){console.log('Quote : '+quote.record[\"Id\"]);console.log('LPCR_Contracted_Checkbox__c:');console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);if(quote.record[\"SBQQ__Type__c\"]=='Renewal'&&quote.record[\"LPCR_Added_Product_Using_QCP__c\"]==false&&quote.record[\"LPCR_Contracted_Checkbox__c\"]==true){var newRecords=[];var conditions={ProductCode:'FraisInscriptionMac'};var fields=['Id','ProductCode'];return conn.sobject('Product2').find(conditions,fields).execute(function(err,records){console.log(records);var product=records[0].Id;console.log('product '+product);if(err){return Promise.reject(err);}else{if(true){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;newRecords.push({SBQQ__Product__c:product,SBQQ__Quote__c:quote.record[\"Id\"],SBQQ__Number__c:100});}if(newRecords.length){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;return conn.sobject('SBQQ__QuoteLine__c').create(newRecords,function(err,ret){console.log(ret);});}}});}return Promise.resolve();}_export('onAfterCalculate',onAfterCalculate);function onBeforeCalculate(quoteModel,lines,conn){if(lines){lines.forEach(function(line){var consumptionUnitPrice=line.record['LPCR_TauxHoraire__c'];if(consumptionUnitPrice>0&&line.consumptionSchedules){line.consumptionSchedules.forEach(function(cs,index){var rates=cs.getRates();if(rates){rates.forEach(function(rate,index){var newPrice=consumptionUnitPrice;rate.set('SBQQ__Price__c',newPrice);});}});}});}return Promise.resolve();}_export('onBeforeCalculate',onBeforeCalculate);function onBeforePriceRules(quoteModel,quoteLineModels,conn){console.log('onBeforePriceRules: ');console.log(quoteModel);var recordTypeMap=new Map();var qliUpgradedSubscriptionList=[];var qliUpgradedSubscriptionMap=new Map();if(quoteLineModels){quoteLineModels.forEach(function(line){if(line.record['SBQQ__UpgradedSubscription__c']){qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);}});if(qliUpgradedSubscriptionList.length){var codeList=\"('\"+qliUpgradedSubscriptionList.join(\"', '\")+\"')\";conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN '+codeList).then(function(results){if(results.totalSize){results.records.forEach(function(record){qliUpgradedSubscriptionMap.set(''+record.Id,record.SBQQ__EndDate__c);});}});}// Get Quote RecordType Map\nvar recordTypeList=\"('Referencement','Referencement_Approuve')\";var SobjectType=\"'SBQQ__Quote__c'\";return conn.query('SELECT Id, DeveloperName FROM RecordType WHERE SobjectType = '+SobjectType+' AND DeveloperName IN '+recordTypeList).then(function(results){if(results.totalSize){results.records.forEach(function(record){recordTypeMap.set(''+record.Id,record.DeveloperName);});}console.log('@@@recordTypeMap');console.log(recordTypeMap);if(typeof quoteLineModels!=='undefined'){quoteLineModels.forEach(function(line){console.log('@@@ QLI');console.log(line);if((recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])||line.record['SBQQ__Quote__r']['RecordTypeId']==null)&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']=='Amendment'){//we add this check to not override dates for the cloned line from ‘clone/cancel’ \n// it will have the exact dates as the original QL\nconsole.log('onBeforePriceRules RecordType and Type is true');if(line.record['LPCR_Clone__c']==false&&line.record['SBQQ__PriorQuantity__c']!=null){if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']===null){//Not a Newly added QL in the amendment\nline.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']!==null&&line.record['SBQQ__EndDate__c']===null){if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']!==null){line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];}}else if(line.record['LPCR_Clone__c']==false&&line.record['SBQQ__PriorQuantity__c']==null){//Newly added QL in the amendment\nvar DateDebut=new Date(line.record['LPCR_DateDebut__c']);var DateFin=new Date(line.record['LPCR_DateFin__c']);if(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);if(DateDebut.getFullYear()===quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];line.record['LPCR_HoldBilling__c']='No';if(line.record['LPCR_DateFin__c']!=null&&DateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';}}else{line.record['LPCR_HoldBilling__c']='Yes';}}}}else if((recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])||line.record['SBQQ__Quote__r']['RecordTypeId']==null)&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']!='Amendment'&&line.record['SBQQ__ChargeType__c']=='Recurring'){console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');//is the QL supposed to  start in this year? already started?\nif(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);var dateDebut=new Date(line.record['LPCR_DateDebut__c']);if(dateDebut.getFullYear()<=quoteStartDate.getFullYear()){//is the QL still alive in this year? not ended?\t\nvar dateFin=new Date(line.record['LPCR_DateFin__c']);if(dateFin.getFullYear()>=quoteStartDate.getFullYear()){line.record['LPCR_HoldBilling__c']='No';//SBQQ__EndDate__c logic\nif(dateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';}//SBQQ__StartDate__c logic\nif(dateDebut.getFullYear()==quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];}}else{line.record['SBQQ__Quantity__c']=0;}}else{line.record['LPCR_HoldBilling__c']='Yes';}}}});}});}return Promise.resolve();}_export('onBeforePriceRules',onBeforePriceRules);function isFieldVisibleForObject(fieldName,quote,conn,objectName){if(objectName==='Quote__c'&&fieldName==='LPCR_TypeAvenant__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}if(objectName==='Quote__c'&&fieldName==='LPCR_DateResiliation__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}}_export('isFieldVisibleForObject',isFieldVisibleForObject);return{setters:[],execute:function(){;}};});"
        },
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef4"
            },
            "IsDeleted": false,
            "Name": "QuoteCalculatorPlugin 26",
            "SBQQ__Code__c": "export function onAfterCalculate(quote, lines, conn) {\r\n    console.log('Quote : ' + quote.record[\"Id\"]);\r\n    console.log('LPCR_Contracted_Checkbox__c:');\r\n    console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);\r\n    if (quote.record[\"SBQQ__Type__c\"] == 'Renewal' && quote.record[\"LPCR_Added_Product_Using_QCP__c\"] == false && quote.record[\"LPCR_Contracted_Checkbox__c\"] == true) {\r\n        var newRecords = [];\r\n\r\n        var conditions = {\r\n            ProductCode: 'FraisInscriptionMac'\r\n        };\r\n        var fields = ['Id', 'ProductCode'];\r\n        return conn.sobject('Product2')\r\n            .find(conditions, fields)\r\n            .execute(function(err, records) {\r\n                console.log(records);\r\n                var product = records[0].Id;\r\n                console.log('product ' + product);\r\n                if (err) {\r\n                    return Promise.reject(err);\r\n                } else {\r\n\r\n                    if (true) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        newRecords.push({\r\n                            SBQQ__Product__c: product,\r\n                            SBQQ__Quote__c: quote.record[\"Id\"],\r\n                            SBQQ__Number__c: 100\r\n                        });\r\n                    }\r\n                    if (newRecords.length) {\r\n                        quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                        return conn.sobject('SBQQ__QuoteLine__c').create(newRecords, function(err, ret) {\r\n                            console.log(ret);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforeCalculate(quoteModel, lines, conn) {\r\n    if (lines) {\r\n        lines.forEach((line) => {\r\n            const consumptionUnitPrice = line.record['LPCR_TauxHoraire__c'];\r\n\r\n            if (consumptionUnitPrice > 0 && line.consumptionSchedules) {\r\n                line.consumptionSchedules.forEach((cs, index) => {\r\n                    const rates = cs.getRates();\r\n                    if (rates) {\r\n                        rates.forEach((rate, index) => {\r\n                            const newPrice = consumptionUnitPrice;\r\n                            rate.set('SBQQ__Price__c', newPrice);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function onBeforePriceRules(quoteModel, quoteLineModels, conn) {\r\n    console.log('onBeforePriceRules @@: ');\r\n    console.log(quoteModel);\r\n\r\n    let recordTypeMap = new Map();\r\n    var qliUpgradedSubscriptionList = [];\r\n    let qliUpgradedSubscriptionMap = new Map();\r\n\r\n    if (quoteLineModels) {\r\n        quoteLineModels.forEach(function(line) {\r\n            if (line.record['SBQQ__UpgradedSubscription__c']) {\r\n                qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);\r\n            }\r\n        });\r\n        if (qliUpgradedSubscriptionList.length) {\r\n            var codeList = \"('\" + qliUpgradedSubscriptionList.join(\"', '\") + \"')\";\r\n\r\n            conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN ' + codeList)\r\n                .then(function(results) {\r\n                    if (results.totalSize) {\r\n                        results.records.forEach(function(record) {\r\n                            qliUpgradedSubscriptionMap.set('' + record.Id, record.SBQQ__EndDate__c);\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n\r\n        if (quoteModel) {\r\n            var conditions = {\r\n                DeveloperName: 'Referencement',\r\n                SobjectType: 'SBQQ__Quote__c'\r\n            };\r\n            var fields = ['Id', 'DeveloperName'];\r\n            return conn.sobject('RecordType')\r\n                .find(conditions, fields)\r\n                .execute(function(err, records) {\r\n                    if (typeof records !== 'undefined') {\r\n                        records.forEach(function(recordType) {\r\n                            recordTypeMap.set(recordType.Id, recordType.DeveloperName);\r\n                        });\r\n                    }\r\n\r\n                    if (typeof quoteLineModels !== 'undefined') {\r\n                        quoteLineModels.forEach(function(line) {\r\n\r\n                            if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] == 'Amendment') {\r\n                                //we add this check to not override dates for the cloned line from ‘clone/cancel’ \r\n                                // it will have the exact dates as the original QL\r\n                                console.log('onBeforePriceRules RecordType and Type is true');\r\n                                if (line.record['LPCR_Clone__c'] == false && line.record['SBQQ__PriorQuantity__c'] != null) {\r\n                                    if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] === null) {\r\n\r\n                                        //Not a Newly added QL in the amendment\r\n                                        line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\r\n                                        if (line.record['SBQQ__UpgradedSubscription__c'] !== null) {\r\n                                            if (qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])) {\r\n                                                line.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n                                            }\r\n                                        }\r\n                                    } else if (line.record['SBQQ__StartDate__c'] !== null && line.record['SBQQ__EndDate__c'] === null) {\r\n                                        if (line.record['SBQQ__UpgradedSubscription__c'] !== null) {\r\n                                            if (qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])) {\r\n                                                line.record['SBQQ__EndDate__c'] = qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);\r\n\r\n                                            }\r\n                                        }\r\n\r\n                                    } else if (line.record['SBQQ__StartDate__c'] === null && line.record['SBQQ__EndDate__c'] !== null) {\r\n                                        line.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n                                    }\r\n                                } else if (line.record['LPCR_Clone__c'] == false && line.record['SBQQ__PriorQuantity__c'] == null) {\r\n                                    //Newly added QL in the amendment\r\n                                    var DateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n                                    var DateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                    if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\t\t\t\t\t\t\t\t\t\tvar quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                        if (DateDebut.getFullYear() === quoteStartDate.getFullYear()) {\r\n                                            line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                            line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                            if (line.record['LPCR_DateFin__c'] != null && DateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                                line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                            } else {\r\n                                                line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                            }\r\n                                        } else {\r\n                                            line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            } else if (recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] != 'Amendment' && line.record['SBQQ__ChargeType__c'] == 'Recurring') {\r\n                                console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');                                \r\n\r\n                                //is the QL supposed to  start in this year? already started?\r\n                                if (line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\t\t\t\t\t\t\t\t\tvar quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n                                    var dateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\r\n                                    if (dateDebut.getFullYear() <= quoteStartDate.getFullYear()) {\r\n                                        //is the QL still alive in this year? not ended?\t\r\n                                        var dateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\r\n                                        if (dateFin.getFullYear() >= quoteStartDate.getFullYear()) {\r\n\r\n                                            line.record['LPCR_HoldBilling__c'] = 'No';\r\n\r\n                                            //SBQQ__EndDate__c logic\r\n                                            if (dateFin < new Date(quoteStartDate.getFullYear(), 11, 31)) {\r\n                                                line.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n                                            } else {\r\n                                                line.record['SBQQ__EndDate__c'] = '' + quoteStartDate.getFullYear() + '-12-31';\r\n                                            }\r\n\r\n                                            //SBQQ__StartDate__c logic\r\n                                            if (dateDebut.getFullYear() == quoteStartDate.getFullYear()) {\r\n                                                line.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\r\n                                            }\r\n                                        } else {\r\n                                            line.record['SBQQ__Quantity__c'] = 0;\r\n                                        }\r\n                                    } else {\r\n                                        line.record['LPCR_HoldBilling__c'] = 'Yes';\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    return Promise.resolve();\r\n}\r\n\r\nexport function isFieldVisibleForObject(fieldName, quote, conn, objectName) {\r\n\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_TypeAvenant__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n    if (objectName === 'Quote__c' && fieldName === 'LPCR_DateResiliation__c') {\r\n        if (quote.SBQQ__Type__c == 'Quote') {\r\n            return false;\r\n        }\r\n    }\r\n};",
            "SBQQ__QuoteFields__c": "LPCR_Added_Product_Using_QCP__c\r\nLPCR_Contracted_Checkbox__c",
            "SBQQ__QuoteLineFields__c": "LPCR_TauxHoraire__c\r\nLPCR_HoldBilling__c\r\nLPCR_Clone__c",
            "SBQQ__TranspiledCode__c": "'use strict';System.register('QCPlugin____UIDFiller____',[],function(_export,_context){\"use strict\";function onAfterCalculate(quote,lines,conn){console.log('Quote : '+quote.record[\"Id\"]);console.log('LPCR_Contracted_Checkbox__c:');console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);if(quote.record[\"SBQQ__Type__c\"]=='Renewal'&&quote.record[\"LPCR_Added_Product_Using_QCP__c\"]==false&&quote.record[\"LPCR_Contracted_Checkbox__c\"]==true){var newRecords=[];var conditions={ProductCode:'FraisInscriptionMac'};var fields=['Id','ProductCode'];return conn.sobject('Product2').find(conditions,fields).execute(function(err,records){console.log(records);var product=records[0].Id;console.log('product '+product);if(err){return Promise.reject(err);}else{if(true){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;newRecords.push({SBQQ__Product__c:product,SBQQ__Quote__c:quote.record[\"Id\"],SBQQ__Number__c:100});}if(newRecords.length){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;return conn.sobject('SBQQ__QuoteLine__c').create(newRecords,function(err,ret){console.log(ret);});}}});}return Promise.resolve();}_export('onAfterCalculate',onAfterCalculate);function onBeforeCalculate(quoteModel,lines,conn){if(lines){lines.forEach(function(line){var consumptionUnitPrice=line.record['LPCR_TauxHoraire__c'];if(consumptionUnitPrice>0&&line.consumptionSchedules){line.consumptionSchedules.forEach(function(cs,index){var rates=cs.getRates();if(rates){rates.forEach(function(rate,index){var newPrice=consumptionUnitPrice;rate.set('SBQQ__Price__c',newPrice);});}});}});}return Promise.resolve();}_export('onBeforeCalculate',onBeforeCalculate);function onBeforePriceRules(quoteModel,quoteLineModels,conn){console.log('onBeforePriceRules @@: ');console.log(quoteModel);var recordTypeMap=new Map();var qliUpgradedSubscriptionList=[];var qliUpgradedSubscriptionMap=new Map();if(quoteLineModels){quoteLineModels.forEach(function(line){if(line.record['SBQQ__UpgradedSubscription__c']){qliUpgradedSubscriptionList.push(line.record['SBQQ__UpgradedSubscription__c']);}});if(qliUpgradedSubscriptionList.length){var codeList=\"('\"+qliUpgradedSubscriptionList.join(\"', '\")+\"')\";conn.query('SELECT Id, SBQQ__EndDate__c FROM SBQQ__Subscription__c WHERE Id IN '+codeList).then(function(results){if(results.totalSize){results.records.forEach(function(record){qliUpgradedSubscriptionMap.set(''+record.Id,record.SBQQ__EndDate__c);});}});}if(quoteModel){var conditions={DeveloperName:'Referencement',SobjectType:'SBQQ__Quote__c'};var fields=['Id','DeveloperName'];return conn.sobject('RecordType').find(conditions,fields).execute(function(err,records){if(typeof records!=='undefined'){records.forEach(function(recordType){recordTypeMap.set(recordType.Id,recordType.DeveloperName);});}if(typeof quoteLineModels!=='undefined'){quoteLineModels.forEach(function(line){if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']=='Amendment'){//we add this check to not override dates for the cloned line from ‘clone/cancel’ \n// it will have the exact dates as the original QL\nconsole.log('onBeforePriceRules RecordType and Type is true');if(line.record['LPCR_Clone__c']==false&&line.record['SBQQ__PriorQuantity__c']!=null){if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']===null){//Not a Newly added QL in the amendment\nline.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']!==null&&line.record['SBQQ__EndDate__c']===null){if(line.record['SBQQ__UpgradedSubscription__c']!==null){if(qliUpgradedSubscriptionMap.has(line.record['SBQQ__UpgradedSubscription__c'])){line.record['SBQQ__EndDate__c']=qliUpgradedSubscriptionMap.get(line.record['SBQQ__UpgradedSubscription__c']);}}}else if(line.record['SBQQ__StartDate__c']===null&&line.record['SBQQ__EndDate__c']!==null){line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];}}else if(line.record['LPCR_Clone__c']==false&&line.record['SBQQ__PriorQuantity__c']==null){//Newly added QL in the amendment\nvar DateDebut=new Date(line.record['LPCR_DateDebut__c']);var DateFin=new Date(line.record['LPCR_DateFin__c']);if(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);if(DateDebut.getFullYear()===quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];line.record['LPCR_HoldBilling__c']='No';if(line.record['LPCR_DateFin__c']!=null&&DateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';}}else{line.record['LPCR_HoldBilling__c']='Yes';}}}}else if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']!='Amendment'&&line.record['SBQQ__ChargeType__c']=='Recurring'){console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');//is the QL supposed to  start in this year? already started?\nif(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);var dateDebut=new Date(line.record['LPCR_DateDebut__c']);if(dateDebut.getFullYear()<=quoteStartDate.getFullYear()){//is the QL still alive in this year? not ended?\t\nvar dateFin=new Date(line.record['LPCR_DateFin__c']);if(dateFin.getFullYear()>=quoteStartDate.getFullYear()){line.record['LPCR_HoldBilling__c']='No';//SBQQ__EndDate__c logic\nif(dateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';}//SBQQ__StartDate__c logic\nif(dateDebut.getFullYear()==quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];}}else{line.record['SBQQ__Quantity__c']=0;}}else{line.record['LPCR_HoldBilling__c']='Yes';}}}});}});}}return Promise.resolve();}_export('onBeforePriceRules',onBeforePriceRules);function isFieldVisibleForObject(fieldName,quote,conn,objectName){if(objectName==='Quote__c'&&fieldName==='LPCR_TypeAvenant__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}if(objectName==='Quote__c'&&fieldName==='LPCR_DateResiliation__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}}_export('isFieldVisibleForObject',isFieldVisibleForObject);return{setters:[],execute:function(){;}};});"
        }
    ]
}