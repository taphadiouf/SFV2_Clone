{
    "records": [
        {
            "attributes": {
                "type": "SBQQ__CustomScript__c",
                "referenceId": "SBQQ__CustomScript__cRef1"
            },
            "IsDeleted": false,
            "LastReferencedDate": "2020-11-23T09:30:01.000+0000",
            "LastViewedDate": "2020-11-23T09:30:01.000+0000",
            "Name": "QuoteCalculatorPlugin",
            "SBQQ__Code__c": "export function onAfterCalculate(quote, lines, conn) {\r\nconsole.log('Quote : '+ quote.record[\"Id\"] );\r\nconsole.log( 'LPCR_Contracted_Checkbox__c:' );\r\nconsole.log( quote.record[\"LPCR_Contracted_Checkbox__c\"] );\r\n if( quote.record[\"SBQQ__Type__c\"] == 'Renewal' && quote.record[\"LPCR_Added_Product_Using_QCP__c\"] == false && quote.record[\"LPCR_Contracted_Checkbox__c\"] == true  ) {\r\n    var newRecords = []; \r\n    \r\n    var conditions = {\r\n                ProductCode: 'FraisInscriptionMac'\r\n            };\r\n    var fields = ['Id','ProductCode'];\r\n    return conn.sobject('Product2')\r\n        .find(conditions, fields)\r\n        .execute(function(err, records) {\r\n            console.log(records);\r\n            var product = records[0].Id;\r\n            console.log( 'product ' + product );\r\n            if(err){\r\n                return Promise.reject(err);\r\n            }else{\r\n                \r\n                if (true) {\r\n                    quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                    newRecords.push(\r\n                    { SBQQ__Product__c: product , SBQQ__Quote__c: quote.record[\"Id\"] , SBQQ__Number__c: 100 }\r\n                    );\r\n                }\r\n                if (newRecords.length) {\r\n                    quote.record[\"LPCR_Added_Product_Using_QCP__c\"] = true;\r\n                    return conn.sobject('SBQQ__QuoteLine__c').create(newRecords, function(err, ret)\r\n                    { console.log(ret); }\r\n                    );\r\n                }  \r\n            }            \r\n        });\r\n  } return Promise.resolve(); \r\n  \r\n }\r\n  \r\n  \r\nexport function onBeforeCalculate(quoteModel, lines, conn) {\r\n        if (lines) {\r\n           lines.forEach((line) => {\r\n            const consumptionUnitPrice = line.record['LPCR_TauxHoraire__c'];\r\n   \r\n              if (consumptionUnitPrice > 0 && line.consumptionSchedules) {\r\n                   line.consumptionSchedules.forEach((cs, index) => {\r\n                        const rates = cs.getRates();\r\n                        if (rates) {\r\n                             rates.forEach((rate, index) => {\r\n                                 const newPrice = consumptionUnitPrice;\r\n                                  rate.set('SBQQ__Price__c', newPrice);\r\n                             });\r\n                        }\r\n                   });\r\n              }\r\n             \r\n          });\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return Promise.resolve();\r\n}\r\n\r\nexport function onBeforePriceRules(quoteModel, quoteLineModels,conn) {\r\n\tconsole.log('onBeforePriceRules : ' );\r\n\tconsole.log(quoteModel );\r\n\tlet recordTypeMap = new Map();\r\n\r\n\tif(quoteModel){\r\n\t\tvar conditions = {\r\n                DeveloperName: 'Referencement',\r\n\t\t\t\tSobjectType:'SBQQ__Quote__c'\r\n            };\r\n    var fields = ['Id','DeveloperName'];\r\n    return conn.sobject('RecordType')\r\n        .find(conditions, fields)\r\n        .execute(function(err, records) {\r\n\t\t if(typeof records !== 'undefined'){\r\n\t\t\t records.forEach(function(recordType) {\r\n\t\t\t\trecordTypeMap.set(recordType.Id,recordType.DeveloperName);\r\n\t\t\t });\r\n\t\t }\r\n\t\t console.log(recordTypeMap);\r\n\t\t \r\n\t\t if (typeof quoteLineModels !== 'undefined') {\r\n\t\t\tquoteLineModels.forEach(function(line) {\r\n\t\t\t\tvar quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\r\n\t\t\t\tvar quoteEndDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__EndDate__c']);\r\n\t\t\t\tconsole.log(quoteStartDate);\r\n\t\t\t\tconsole.log(quoteEndDate);\r\n\t\t\t\t\r\n\t\t\t\tif(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] == 'Amendment'){\r\n\t\t\t\t\t//we add this check to not override dates for the cloned line from ‘clone/cancel’ \r\n\t\t\t\t\t// it will have the exact dates as the original QL\r\n\t\t\t\t\tconsole.log('onBeforePriceRules RecordType and Type is true');\r\n\t\t\t\t\tif(line.record['SBQQ__StartDate__c'] === null){\r\n\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ_StartDate_c is NULL true');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//Not a Newly added QL in the amendment\r\n\t\t\t\t\t\tif(line.record['SBQQ__PriorQuantity__c'] !== null){\r\n\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null');\r\n\t\t\t\t\t\t\tline.record['SBQQ__StartDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];\r\n\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = line.record['SBQQ__Quote__r']['SBQQ__EndDate__c'];\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t//Newly added QL in the amendment\r\n\t\t\t\t\t\t\tvar DateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\t\t\t\t\t\t\tvar DateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(line.record['LPCR_DateDebut__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null && DateDebut.getFullYear() === quoteStartDate.getFullYear() ){\r\n\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  both year equal');\r\n\t\t\t\t\t\t\t\tline.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(line.record['LPCR_DateFin__c'] != null && DateFin < new Date(quoteStartDate.getFullYear(),11,31)){\r\n\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = ''+quoteStartDate.getFullYear()+'-12-31';\r\n\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate>');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tline.record['LPCR_HoldBilling__c'] = 'Yes';\r\n\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId']) && line.record['SBQQ__Quote__r']['SBQQ__Type__c'] != 'Amendment' && line.record['SBQQ__ChargeType__c'] == 'Recurring'){\r\n\t\t\t\t\t\r\n\t\t\t\t\tconsole.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');\r\n\t\t\t\t\tconsole.log('Date debut '+line.record['LPCR_DateDebut__c']);\r\n\t\t\t\t\tvar quoteStartDate = new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);\t\t\t\t\t\r\n\t\t\t\t\tconsole.log(quoteStartDate);\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t//is the QL supposed to  start in this year? already started?\r\n\t\t\t\t\tif(line.record['LPCR_DateDebut__c'] != null && line.record['LPCR_DateFin__c'] != null && line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'] != null) {\r\n\r\n\t\t\t\t\t\tconsole.log('LPCR_DateDebut__c not null');\r\n\t\t\t\t\t\tvar dateDebut = new Date(line.record['LPCR_DateDebut__c']);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(dateDebut.getFullYear() <= quoteStartDate.getFullYear()) {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//is the QL still alive in this year? not ended?\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t\t\tconsole.log('LPCR_DateFin__c not null');\r\n\t\t\t\t\t\t\t\tvar dateFin = new Date(line.record['LPCR_DateFin__c']);\r\n\t\t\t\t\t\t\t\tconsole.log(dateFin);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (dateFin.getFullYear() >= quoteStartDate.getFullYear()){\r\n\r\n\t\t\t\t\t\t\t\t\tline.record['LPCR_HoldBilling__c'] = 'No';\r\n\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  LPCR_HoldBilling__c is set No');\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t//SBQQ__EndDate__c logic\r\n\t\t\t\t\t\t\t\t\tif (dateFin < new Date(quoteStartDate.getFullYear(),11,31)){\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = line.record['LPCR_DateFin__c'];\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__EndDate__c'] = ''+quoteStartDate.getFullYear()+'-12-31';\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate> '+line.record['SBQQ__EndDate__c']);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t//SBQQ__StartDate__c logic\r\n\t\t\t\t\t\t\t\t\tif(dateDebut.getFullYear() == quoteStartDate.getFullYear() ){\r\n\t\t\t\t\t\t\t\t\t\tline.record['SBQQ__StartDate__c'] = line.record['LPCR_DateDebut__c'];\t\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__StartDate__c is set line LPCR_DateDebut__c');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse{\r\n\r\n\t\t\t\t\t\t\t\t\tline.record['SBQQ__Quantity__c'] = 0;\r\n\t\t\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  SBQQ__Quantity__c is set 0');\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tline.record['LPCR_HoldBilling__c'] = 'Yes';\r\n\t\t\t\t\t\t\tconsole.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t}\r\n\t});\r\n\t}\r\n\treturn Promise.resolve();\r\n}\r\n\r\nexport function isFieldVisibleForObject(fieldName, quote, conn, objectName){\r\n\r\nif( objectName === 'Quote__c' && fieldName === 'LPCR_TypeAvenant__c'){\r\nif(quote.SBQQ__Type__c == 'Quote'){\r\nreturn false;}}\r\nif( objectName === 'Quote__c' && fieldName === 'LPCR_DateResiliation__c'){\r\nif(quote.SBQQ__Type__c == 'Quote'){\r\nreturn false;}}\r\n};",
            "SBQQ__QuoteFields__c": "LPCR_Added_Product_Using_QCP__c\r\nLPCR_Contracted_Checkbox__c",
            "SBQQ__QuoteLineFields__c": "LPCR_TauxHoraire__c\r\nLPCR_HoldBilling__c",
            "SBQQ__TranspiledCode__c": "'use strict';System.register('QCPlugin____UIDFiller____',[],function(_export,_context){\"use strict\";function onAfterCalculate(quote,lines,conn){console.log('Quote : '+quote.record[\"Id\"]);console.log('LPCR_Contracted_Checkbox__c:');console.log(quote.record[\"LPCR_Contracted_Checkbox__c\"]);if(quote.record[\"SBQQ__Type__c\"]=='Renewal'&&quote.record[\"LPCR_Added_Product_Using_QCP__c\"]==false&&quote.record[\"LPCR_Contracted_Checkbox__c\"]==true){var newRecords=[];var conditions={ProductCode:'FraisInscriptionMac'};var fields=['Id','ProductCode'];return conn.sobject('Product2').find(conditions,fields).execute(function(err,records){console.log(records);var product=records[0].Id;console.log('product '+product);if(err){return Promise.reject(err);}else{if(true){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;newRecords.push({SBQQ__Product__c:product,SBQQ__Quote__c:quote.record[\"Id\"],SBQQ__Number__c:100});}if(newRecords.length){quote.record[\"LPCR_Added_Product_Using_QCP__c\"]=true;return conn.sobject('SBQQ__QuoteLine__c').create(newRecords,function(err,ret){console.log(ret);});}}});}return Promise.resolve();}_export('onAfterCalculate',onAfterCalculate);function onBeforeCalculate(quoteModel,lines,conn){if(lines){lines.forEach(function(line){var consumptionUnitPrice=line.record['LPCR_TauxHoraire__c'];if(consumptionUnitPrice>0&&line.consumptionSchedules){line.consumptionSchedules.forEach(function(cs,index){var rates=cs.getRates();if(rates){rates.forEach(function(rate,index){var newPrice=consumptionUnitPrice;rate.set('SBQQ__Price__c',newPrice);});}});}});}return Promise.resolve();}_export('onBeforeCalculate',onBeforeCalculate);function onBeforePriceRules(quoteModel,quoteLineModels,conn){console.log('onBeforePriceRules : ');console.log(quoteModel);var recordTypeMap=new Map();if(quoteModel){var conditions={DeveloperName:'Referencement',SobjectType:'SBQQ__Quote__c'};var fields=['Id','DeveloperName'];return conn.sobject('RecordType').find(conditions,fields).execute(function(err,records){if(typeof records!=='undefined'){records.forEach(function(recordType){recordTypeMap.set(recordType.Id,recordType.DeveloperName);});}console.log(recordTypeMap);if(typeof quoteLineModels!=='undefined'){quoteLineModels.forEach(function(line){var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);var quoteEndDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__EndDate__c']);console.log(quoteStartDate);console.log(quoteEndDate);if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']=='Amendment'){//we add this check to not override dates for the cloned line from ‘clone/cancel’ \n// it will have the exact dates as the original QL\nconsole.log('onBeforePriceRules RecordType and Type is true');if(line.record['SBQQ__StartDate__c']===null){console.log('onBeforePriceRules  SBQQ_StartDate_c is NULL true');//Not a Newly added QL in the amendment\nif(line.record['SBQQ__PriorQuantity__c']!==null){console.log('onBeforePriceRules  SBQQ__PriorQuantity__c is not null');line.record['SBQQ__StartDate__c']=line.record['SBQQ__Quote__r']['SBQQ__StartDate__c'];line.record['SBQQ__EndDate__c']=line.record['SBQQ__Quote__r']['SBQQ__EndDate__c'];}else{//Newly added QL in the amendment\nvar DateDebut=new Date(line.record['LPCR_DateDebut__c']);var DateFin=new Date(line.record['LPCR_DateFin__c']);if(line.record['LPCR_DateDebut__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null&&DateDebut.getFullYear()===quoteStartDate.getFullYear()){console.log('onBeforePriceRules  both year equal');line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];if(line.record['LPCR_DateFin__c']!=null&&DateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate>');}}else{line.record['LPCR_HoldBilling__c']='Yes';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');}}}}else if(recordTypeMap.has(line.record['SBQQ__Quote__r']['RecordTypeId'])&&line.record['SBQQ__Quote__r']['SBQQ__Type__c']!='Amendment'&&line.record['SBQQ__ChargeType__c']=='Recurring'){console.log('onBeforePriceRules Quote type not equal Amendment and charge type Recurring');console.log('Date debut '+line.record['LPCR_DateDebut__c']);var quoteStartDate=new Date(line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']);console.log(quoteStartDate);//is the QL supposed to  start in this year? already started?\nif(line.record['LPCR_DateDebut__c']!=null&&line.record['LPCR_DateFin__c']!=null&&line.record['SBQQ__Quote__r']['SBQQ__StartDate__c']!=null){console.log('LPCR_DateDebut__c not null');var dateDebut=new Date(line.record['LPCR_DateDebut__c']);if(dateDebut.getFullYear()<=quoteStartDate.getFullYear()){//is the QL still alive in this year? not ended?\t\t\t\t\t\t\t\nconsole.log('LPCR_DateFin__c not null');var dateFin=new Date(line.record['LPCR_DateFin__c']);console.log(dateFin);if(dateFin.getFullYear()>=quoteStartDate.getFullYear()){line.record['LPCR_HoldBilling__c']='No';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set No');//SBQQ__EndDate__c logic\nif(dateFin<new Date(quoteStartDate.getFullYear(),11,31)){line.record['SBQQ__EndDate__c']=line.record['LPCR_DateFin__c'];console.log('onBeforePriceRules  SBQQ__EndDate__c is set LPCR_DateFin__c');}else{line.record['SBQQ__EndDate__c']=''+quoteStartDate.getFullYear()+'-12-31';console.log('onBeforePriceRules  SBQQ__EndDate__c is set 31-12-Year<startdate> '+line.record['SBQQ__EndDate__c']);}//SBQQ__StartDate__c logic\nif(dateDebut.getFullYear()==quoteStartDate.getFullYear()){line.record['SBQQ__StartDate__c']=line.record['LPCR_DateDebut__c'];console.log('onBeforePriceRules  SBQQ__StartDate__c is set line LPCR_DateDebut__c');}}else{line.record['SBQQ__Quantity__c']=0;console.log('onBeforePriceRules  SBQQ__Quantity__c is set 0');}}else{line.record['LPCR_HoldBilling__c']='Yes';console.log('onBeforePriceRules  LPCR_HoldBilling__c is set Yes');}}}});}});}return Promise.resolve();}_export('onBeforePriceRules',onBeforePriceRules);function isFieldVisibleForObject(fieldName,quote,conn,objectName){if(objectName==='Quote__c'&&fieldName==='LPCR_TypeAvenant__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}if(objectName==='Quote__c'&&fieldName==='LPCR_DateResiliation__c'){if(quote.SBQQ__Type__c=='Quote'){return false;}}}_export('isFieldVisibleForObject',isFieldVisibleForObject);return{setters:[],execute:function(){;}};});"
        }
    ]
}