/**
* @author E.Yhuellou
* @date 31/01/2021
* @Description Class allowing to send document to LPCR GED
*/
public with sharing class QA001_CalloutEnvoieDocumentGED implements Queueable,Database.AllowsCallouts {

    static private String className = QA001_CalloutEnvoieDocumentGED.class.getName();
    private String ownerId;
    private String docSfId;
    private String name;
    private String binary;
    private String currentMail;
    private String currentParentObjectId;
    private blng__Invoice__c currentInvoice;

    // ownerSfId : Owner of Attachement 
    // docSfID : Id of Attachement generated by Salesforce
    // name : Name of the attachement
    // binaryDocument : Document content
    // invoice : (Optional) invoice related to document
    // mail : mail adress to be sent
    public QA001_CalloutEnvoieDocumentGED(String ownerSfId, String docSfID, String name, String binaryDocument, blng__Invoice__c invoice, String mail) {

        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'ownerSfId:' + ownerSfId);

        this.ownerId = this.getCorrespondingAccount(ownerSfId);
        this.docSfId = docSfID;
        this.name = name;
        this.binary = binaryDocument;
        this.currentInvoice = invoice;
        this.currentMail = mail;
        this.currentParentObjectId = docSfID;

        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'this.ownerId:' + this.ownerId);
        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'this.docSfId:' + this.docSfId);
        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'this.name:' + this.name);
        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'this.currentInvoice:' + this.currentInvoice);
        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'this.currentMail:' + this.currentMail);
        PAD.log(className, 'QA001_CalloutEnvoieDocumentGED', 'this.currentParentObjectId:' + this.currentParentObjectId);
    }   

    public void execute(QueueableContext context) {

        String errorMsg = '';
        HttpResponse response;
        final String WS_NOM_SERVICE  = 'LPCR_ENVOIE_DOCUMENT';
        Id CrecheSfId;
        Map<Id,blng__Invoice__c> invoiceToUpdate = new Map<Id,blng__Invoice__c>();
        WRP004_APISaveDocument data;
        
        PAD.Log(className, 'execute', 'start');
        
        try {

            Http http = new Http();
            HttpRequest request = new HttpRequest();
            LPCR_Environnement__c envCS = LPCR_Environnement__c.getInstance();
        
            request.setEndpoint('callout:DEV_SEND_DOCUMENT');
            if('UAT'.equals(envCS.Nom__c)) request.setEndpoint('callout:UAT_SEND_DOCUMENT');
            if('PROD'.equals(envCS.Nom__c)) request.setEndpoint('callout:PROD_SEND_DOCUMENT');
        
            request.setMethod('POST');
            request.setHeader('Content-Type', 'application/json;charset=UTF-8');
            
            if(Name.contains('Facture')) {
                 CrecheSfId = getB2CFactureCrecheID(this.ownerId);
            }
            if(Name.contains('Contrat')) {
                 CrecheSfId = getB2CContractCrecheID(this.ownerId);
            }
        
            data = new WRP004_APISaveDocument(this.ownerId, DocSfID, Name, this.binary, String.valueOf(this.currentInvoice.LPCR_Creche__c));
            request.setBody(JSON.serialize(data));
            
            response = http.send(request);

            PAD.Log(className, 'executeSendDocumentCallout','response:' + response);
			PAD.Log(className, 'executeSendDocumentCallout','response.getBody():' + response.getBody());
            PAD.Log(className, 'execute', 'Doc Sent by Callout...');
            
        }
        catch (System.CalloutException e) { 

            PAD.Log(className, 'execute', 'CalloutException In catch');
            errorMsg = String.valueOf(e);
            errorMsg += ' - line:' + e.getLineNumber();
        }
        catch (System.DMLException e) { 

            PAD.Log(className, 'execute', 'DMLException In catch');
            errorMsg = String.valueOf(e);
            errorMsg += ' - line:' + e.getLineNumber();
        }
        catch (System.Exception e) { 

            PAD.Log(className, 'execute', 'Exception In catch');
            errorMsg = String.valueOf(e);
            errorMsg += ' - line:' + e.getLineNumber();
        }
        finally {

            if (this.currentInvoice != null) {
                this.currentParentObjectId = currentInvoice.Id;
            }

            if (errorMsg != '') { // ERROR
                UM001_LogManager.writeLogActivityWithoutFuture(className, 'execute', 'Callout', this.currentParentObjectId, 'body:' + JSON.serialize(data) +  ' - Apex Callout Exception:' + errorMsg, UM010_Constant.ERROR);  
            }
            
            if(response != null && response.getStatusCode() != null){

                if (String.valueOf(response.getStatusCode()).equals('200')) { // SUCCESS

                    if(this.currentInvoice != null) { // Chain Doc List (QA002) and Email sending (QA003) after conga invoice generation + update status to Envoyéé
                        
                        currentInvoice.LPCR_StatutFacture__c = 'Envoyée';
                        invoiceToUpdate.put(currentInvoice.id,currentInvoice);
                        QA002_CalloutListeDocumentGED docListJob = new QA002_CalloutListeDocumentGED(this.ownerId, 'Facture', this.currentMail, '', '', '', 'FACTURE_CONGA');
                        ID jobID = System.enqueueJob(docListJob);
                    }

                    UM001_LogManager.writeLogActivityWithoutFuture(className, 'execute', 'Callout', this.currentParentObjectId, /*'body:' + JSON.serialize(data) +*/ ' - statusCode:' + String.valueOf(response.getStatusCode()) + ' - this.ownerId:' + this.ownerId, UM010_Constant.SUCCESS);  

                    if(invoiceToUpdate.size() !=0 ){
                        update invoiceToUpdate.values();
                    }
                
                } else { // ERROR
                    UM001_LogManager.writeLogActivityWithoutFuture(className, 'execute', 'Callout', this.currentParentObjectId,  /*'body:' + JSON.serialize(data) +*/ 'Exception:' + String.valueOf(response.getStatusCode()) + ' - statusCode:' + String.valueOf(response.getStatusCode()) + ' - Attachment.Id:' + DocSfID + ' - this.ownerId:' + this.ownerId, UM010_Constant.ERROR);  
                }
            }else{ // ERROR
                UM001_LogManager.writeLogActivityWithoutFuture(className, 'execute', 'Callout', this.currentParentObjectId,  /*'body:' + JSON.serialize(data) +*/ 'Exception: Internal Error. Response is null! - Attachment.Id:' + DocSfID + ' - this.ownerId:' + this.ownerId, UM010_Constant.ERROR);  
            }
            
        }

    }

    // Should return Id of Creche if invoice is linked to a B2C Invoice
    public static Id getB2CFactureCrecheID(String idInvoice){

        Id factureCrecheId = null;
        Id crecheRecordTypeId = EM003_RecordTypeEntity.getRecTypeIdByObjectAndName(Label.LPCR_Account,Label.LPCR_Creche);

        List<blng__Invoice__c> tmpListFacture = new List<blng__Invoice__c>([SELECT Id,LPCR_Creche__c,blng__Account__c FROM blng__Invoice__c WHERE blng__Account__r.RecordTypeId =: crecheRecordTypeId AND ID =: idInvoice order by createdDAte desc limit 1]);
        
        if (tmpListFacture != null && tmpListFacture.size() > 0) {
            factureCrecheId = tmpListFacture[0].LPCR_Creche__c;
        }

        return factureCrecheId;
    }

    public static Id getB2CContractCrecheID(String OwnerSfId){

        String errorMsg = '';
        Id contractCrecheId;
        try {
            Id acceuilRecTypeId = EM003_RecordTypeEntity.getRecTypeIdByObjectAndName(Label.LPCR_Quote,Label.LPCR_ContratA);
            Id acceuilApprRecTypeId = EM003_RecordTypeEntity.getRecTypeIdByObjectAndName(Label.LPCR_Quote,Label.LPCR_Accueil_Approuve);

            Id acceuilDevisId = [SELECT Id,LPCR_Devis__c FROM echosign_dev1__SIGN_Agreement__c WHERE 
                (LPCR_Devis__r.RecordTypeId =: acceuilRecTypeId OR 
                LPCR_Devis__r.RecordTypeId =: acceuilApprRecTypeId) 
                AND 
                ID =: OwnerSfId].LPCR_Devis__c;
            
            List<SBQQ__QuoteLine__c> relatedQuoteLignes = [SELECT Id, SBQQ__Quote__c  FROM SBQQ__QuoteLine__c WHERE SBQQ__Quote__c =: acceuilDevisId];
            
            Set<Id> quoteLigneIds = UM003_TypeManager.getIdsOfListObjects(relatedQuoteLignes);
            
            List<OrderItem> relatedOrderItems = [SELECT Id, SBQQ__QuoteLine__c, SBQQ__Contract__c FROM OrderItem WHERE SBQQ__QuoteLine__c IN: quoteLigneIds ];
            
            Id relatedContractId = relatedOrderItems.get(0).SBQQ__Contract__c;
            
            contractCrecheId = [SELECT Id, LPCR_Creche__c  FROM COntract WHERE Id=: relatedContractId ].LPCR_Creche__c;
            
        } catch (Exception e ) {
            errorMsg = e.getMessage();
        } finally {
            if (errorMsg != '') {
                UM001_LogManager.writeLogActivityWithoutFuture(className, 'getB2CContractCrecheID', 'Apex Logic', null,  'Apex Logic Exception:' + errorMsg, UM010_Constant.ERROR);  
            }
            
        }
        
        return contractCrecheId;
    }

    // As Attachment can be created with different parentId and as document as to be sent to GED with corresponding Account for Invoice and Signed Quote
    // This method will determine the right Account id corresponding to the Quote or Invoice Id
    public Id getCorrespondingAccount(String ownerSfId) {

        Id tmpId = Id.valueOf(ownerSfId);
        Id accountResultId = null;

        Schema.SObjectType sobjectType = tmpId.getSObjectType();
        String sobjectName = sobjectType.getDescribe().getName();

        PAD.log(className, 'getCorrespondingAccount', 'sobjectName:' + sobjectName);

        if (sobjectName == 'blng__invoice__c') { 
            List<blng__invoice__c> tmpList = new List<blng__invoice__c>([Select Id, blng__Account__c from blng__invoice__c where Id = :tmpId]);
            if (tmpList != null && tmpList.size() > 0) {
                accountResultId = tmpList[0].blng__Account__c;
            }
        }
        else if (sobjectName == 'SBQQ__Quote__c') {
            List<SBQQ__Quote__c> tmpList = new List<SBQQ__Quote__c>([Select Id, SBQQ__Account__c from SBQQ__Quote__c where Id = :tmpId]);
            if (tmpList != null && tmpList.size() > 0) {
                accountResultId = tmpList[0].SBQQ__Account__c;
            }
        }
        else if (sobjectName == 'echosign_dev1__SIGN_Agreement__c') {
            List<echosign_dev1__SIGN_Agreement__c> tmpList = new List<echosign_dev1__SIGN_Agreement__c>([Select Id, LPCR_Devis__r.SBQQ__Account__c from echosign_dev1__SIGN_Agreement__c where Id = :tmpId]);
            if (tmpList != null && tmpList.size() > 0) {
                accountResultId = tmpList[0].LPCR_Devis__r.SBQQ__Account__c;
            }
        }
        else {
            accountResultId = tmpId;
        }
        return accountResultId;
    }  
}